%--------------------------------------------------
% Generated by Sokoban.hs
%--------------------------------------------------
% 
% Time 1:
% 
% .m..b...
% 
% east
% 
% Time 2:
% 
% ..m.b...
% 
% noop
% 
% Time 3:
% 
% ..m.b...
% 
% east
% 
% Time 4:
% 
% ...mb...
% 
% east
% 
% Time 5:
% 
% ....mb..
% 
% noop
% 
% Time 6:
% 
% ....mb..
% 
% east
% 
% Time 7:
% 
% .....mb.
% 
% east
% 
% Time 8:
% 
% ......mb
% 
% noop
% 
%--------------------------------------------------

% Pixels:

% Time: 1

% .m..b...

% ⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 2

% ..m.b...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬛⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬜⬛⬜⬜⬜⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 3

% ..m.b...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 4

% ...mb...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 5

% ....mb..

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 6

% ....mb..

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Time: 7

% .....mb.

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬛⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜


% Sprite map:

bnn_input(ex_0, node(1, 1), 0).  
bnn_input(ex_0, node(1, 2), 0).  
bnn_input(ex_0, node(1, 3), 0).  
bnn_input(ex_0, node(1, 4), 0).  
bnn_input(ex_0, node(1, 5), 0).  
bnn_input(ex_0, node(1, 6), 0).  
bnn_input(ex_0, node(1, 7), 0).  
bnn_input(ex_0, node(1, 8), 0).  
bnn_input(ex_0, node(1, 9), 0).  
bnn_input(ex_0, node(1, 10), 0).  
bnn_input(ex_0, node(1, 11), 0).  
bnn_input(ex_0, node(1, 12), 0).  
bnn_input(ex_0, node(1, 13), 0).  
bnn_input(ex_0, node(1, 14), 0).  
bnn_input(ex_0, node(1, 15), 0).  
bnn_input(ex_0, node(1, 16), 0).  
bnn_input(ex_0, node(1, 17), 0).  
bnn_input(ex_0, node(1, 18), 0).  
bnn_input(ex_0, node(1, 19), 0).  
bnn_input(ex_0, node(1, 20), 1).  
bnn_input(ex_0, node(1, 21), 0).  
bnn_input(ex_0, node(1, 22), 0).  
bnn_input(ex_0, node(1, 23), 0).  
bnn_input(ex_0, node(1, 24), 0).  
bnn_input(ex_0, node(1, 25), 0).  

bnn_input(ex_1, node(1, 1), 0).  
bnn_input(ex_1, node(1, 2), 0).  
bnn_input(ex_1, node(1, 3), 0).  
bnn_input(ex_1, node(1, 4), 0).  
bnn_input(ex_1, node(1, 5), 0).  
bnn_input(ex_1, node(1, 6), 0).  
bnn_input(ex_1, node(1, 7), 0).  
bnn_input(ex_1, node(1, 8), 0).  
bnn_input(ex_1, node(1, 9), 0).  
bnn_input(ex_1, node(1, 10), 0).  
bnn_input(ex_1, node(1, 11), 0).  
bnn_input(ex_1, node(1, 12), 0).  
bnn_input(ex_1, node(1, 13), 0).  
bnn_input(ex_1, node(1, 14), 0).  
bnn_input(ex_1, node(1, 15), 0).  
bnn_input(ex_1, node(1, 16), 1).  
bnn_input(ex_1, node(1, 17), 0).  
bnn_input(ex_1, node(1, 18), 0).  
bnn_input(ex_1, node(1, 19), 0).  
bnn_input(ex_1, node(1, 20), 0).  
bnn_input(ex_1, node(1, 21), 0).  
bnn_input(ex_1, node(1, 22), 0).  
bnn_input(ex_1, node(1, 23), 0).  
bnn_input(ex_1, node(1, 24), 0).  
bnn_input(ex_1, node(1, 25), 0).  

bnn_input(ex_2, node(1, 1), 0).  
bnn_input(ex_2, node(1, 2), 0).  
bnn_input(ex_2, node(1, 3), 0).  
bnn_input(ex_2, node(1, 4), 0).  
bnn_input(ex_2, node(1, 5), 0).  
bnn_input(ex_2, node(1, 6), 0).  
bnn_input(ex_2, node(1, 7), 0).  
bnn_input(ex_2, node(1, 8), 0).  
bnn_input(ex_2, node(1, 9), 0).  
bnn_input(ex_2, node(1, 10), 0).  
bnn_input(ex_2, node(1, 11), 0).  
bnn_input(ex_2, node(1, 12), 0).  
bnn_input(ex_2, node(1, 13), 0).  
bnn_input(ex_2, node(1, 14), 0).  
bnn_input(ex_2, node(1, 15), 0).  
bnn_input(ex_2, node(1, 16), 0).  
bnn_input(ex_2, node(1, 17), 1).  
bnn_input(ex_2, node(1, 18), 0).  
bnn_input(ex_2, node(1, 19), 0).  
bnn_input(ex_2, node(1, 20), 0).  
bnn_input(ex_2, node(1, 21), 0).  
bnn_input(ex_2, node(1, 22), 0).  
bnn_input(ex_2, node(1, 23), 0).  
bnn_input(ex_2, node(1, 24), 0).  
bnn_input(ex_2, node(1, 25), 0).  

bnn_input(ex_3, node(1, 1), 0).  
bnn_input(ex_3, node(1, 2), 0).  
bnn_input(ex_3, node(1, 3), 0).  
bnn_input(ex_3, node(1, 4), 0).  
bnn_input(ex_3, node(1, 5), 0).  
bnn_input(ex_3, node(1, 6), 0).  
bnn_input(ex_3, node(1, 7), 0).  
bnn_input(ex_3, node(1, 8), 0).  
bnn_input(ex_3, node(1, 9), 0).  
bnn_input(ex_3, node(1, 10), 0).  
bnn_input(ex_3, node(1, 11), 0).  
bnn_input(ex_3, node(1, 12), 0).  
bnn_input(ex_3, node(1, 13), 0).  
bnn_input(ex_3, node(1, 14), 0).  
bnn_input(ex_3, node(1, 15), 0).  
bnn_input(ex_3, node(1, 16), 0).  
bnn_input(ex_3, node(1, 17), 0).  
bnn_input(ex_3, node(1, 18), 0).  
bnn_input(ex_3, node(1, 19), 0).  
bnn_input(ex_3, node(1, 20), 0).  
bnn_input(ex_3, node(1, 21), 0).  
bnn_input(ex_3, node(1, 22), 0).  
bnn_input(ex_3, node(1, 23), 0).  
bnn_input(ex_3, node(1, 24), 0).  
bnn_input(ex_3, node(1, 25), 0).  

bnn_input(ex_4, node(1, 1), 0).  
bnn_input(ex_4, node(1, 2), 1).  
bnn_input(ex_4, node(1, 3), 1).  
bnn_input(ex_4, node(1, 4), 1).  
bnn_input(ex_4, node(1, 5), 0).  
bnn_input(ex_4, node(1, 6), 1).  
bnn_input(ex_4, node(1, 7), 1).  
bnn_input(ex_4, node(1, 8), 1).  
bnn_input(ex_4, node(1, 9), 1).  
bnn_input(ex_4, node(1, 10), 1).  
bnn_input(ex_4, node(1, 11), 1).  
bnn_input(ex_4, node(1, 12), 1).  
bnn_input(ex_4, node(1, 13), 1).  
bnn_input(ex_4, node(1, 14), 1).  
bnn_input(ex_4, node(1, 15), 1).  
bnn_input(ex_4, node(1, 16), 1).  
bnn_input(ex_4, node(1, 17), 1).  
bnn_input(ex_4, node(1, 18), 1).  
bnn_input(ex_4, node(1, 19), 1).  
bnn_input(ex_4, node(1, 20), 1).  
bnn_input(ex_4, node(1, 21), 0).  
bnn_input(ex_4, node(1, 22), 1).  
bnn_input(ex_4, node(1, 23), 1).  
bnn_input(ex_4, node(1, 24), 0).  
bnn_input(ex_4, node(1, 25), 0).  

bnn_input(ex_5, node(1, 1), 0).  
bnn_input(ex_5, node(1, 2), 1).  
bnn_input(ex_5, node(1, 3), 1).  
bnn_input(ex_5, node(1, 4), 1).  
bnn_input(ex_5, node(1, 5), 1).  
bnn_input(ex_5, node(1, 6), 1).  
bnn_input(ex_5, node(1, 7), 1).  
bnn_input(ex_5, node(1, 8), 1).  
bnn_input(ex_5, node(1, 9), 1).  
bnn_input(ex_5, node(1, 10), 1).  
bnn_input(ex_5, node(1, 11), 1).  
bnn_input(ex_5, node(1, 12), 1).  
bnn_input(ex_5, node(1, 13), 1).  
bnn_input(ex_5, node(1, 14), 1).  
bnn_input(ex_5, node(1, 15), 1).  
bnn_input(ex_5, node(1, 16), 1).  
bnn_input(ex_5, node(1, 17), 1).  
bnn_input(ex_5, node(1, 18), 1).  
bnn_input(ex_5, node(1, 19), 1).  
bnn_input(ex_5, node(1, 20), 1).  
bnn_input(ex_5, node(1, 21), 0).  
bnn_input(ex_5, node(1, 22), 1).  
bnn_input(ex_5, node(1, 23), 1).  
bnn_input(ex_5, node(1, 24), 1).  
bnn_input(ex_5, node(1, 25), 0).  

bnn_input(ex_6, node(1, 1), 0).  
bnn_input(ex_6, node(1, 2), 1).  
bnn_input(ex_6, node(1, 3), 1).  
bnn_input(ex_6, node(1, 4), 1).  
bnn_input(ex_6, node(1, 5), 0).  
bnn_input(ex_6, node(1, 6), 1).  
bnn_input(ex_6, node(1, 7), 1).  
bnn_input(ex_6, node(1, 8), 1).  
bnn_input(ex_6, node(1, 9), 1).  
bnn_input(ex_6, node(1, 10), 1).  
bnn_input(ex_6, node(1, 11), 1).  
bnn_input(ex_6, node(1, 12), 1).  
bnn_input(ex_6, node(1, 13), 0).  
bnn_input(ex_6, node(1, 14), 1).  
bnn_input(ex_6, node(1, 15), 1).  
bnn_input(ex_6, node(1, 16), 1).  
bnn_input(ex_6, node(1, 17), 1).  
bnn_input(ex_6, node(1, 18), 1).  
bnn_input(ex_6, node(1, 19), 1).  
bnn_input(ex_6, node(1, 20), 1).  
bnn_input(ex_6, node(1, 21), 0).  
bnn_input(ex_6, node(1, 22), 1).  
bnn_input(ex_6, node(1, 23), 1).  
bnn_input(ex_6, node(1, 24), 1).  
bnn_input(ex_6, node(1, 25), 0).  

bnn_input(ex_7, node(1, 1), 0).  
bnn_input(ex_7, node(1, 2), 1).  
bnn_input(ex_7, node(1, 3), 1).  
bnn_input(ex_7, node(1, 4), 1).  
bnn_input(ex_7, node(1, 5), 0).  
bnn_input(ex_7, node(1, 6), 1).  
bnn_input(ex_7, node(1, 7), 1).  
bnn_input(ex_7, node(1, 8), 1).  
bnn_input(ex_7, node(1, 9), 1).  
bnn_input(ex_7, node(1, 10), 1).  
bnn_input(ex_7, node(1, 11), 1).  
bnn_input(ex_7, node(1, 12), 1).  
bnn_input(ex_7, node(1, 13), 1).  
bnn_input(ex_7, node(1, 14), 1).  
bnn_input(ex_7, node(1, 15), 1).  
bnn_input(ex_7, node(1, 16), 1).  
bnn_input(ex_7, node(1, 17), 1).  
bnn_input(ex_7, node(1, 18), 1).  
bnn_input(ex_7, node(1, 19), 1).  
bnn_input(ex_7, node(1, 20), 1).  
bnn_input(ex_7, node(1, 21), 0).  
bnn_input(ex_7, node(1, 22), 1).  
bnn_input(ex_7, node(1, 23), 1).  
bnn_input(ex_7, node(1, 24), 1).  
bnn_input(ex_7, node(1, 25), 0).  

bnn_input(ex_8, node(1, 1), 1).  
bnn_input(ex_8, node(1, 2), 0).  
bnn_input(ex_8, node(1, 3), 0).  
bnn_input(ex_8, node(1, 4), 0).  
bnn_input(ex_8, node(1, 5), 1).  
bnn_input(ex_8, node(1, 6), 0).  
bnn_input(ex_8, node(1, 7), 1).  
bnn_input(ex_8, node(1, 8), 0).  
bnn_input(ex_8, node(1, 9), 1).  
bnn_input(ex_8, node(1, 10), 0).  
bnn_input(ex_8, node(1, 11), 0).  
bnn_input(ex_8, node(1, 12), 0).  
bnn_input(ex_8, node(1, 13), 1).  
bnn_input(ex_8, node(1, 14), 0).  
bnn_input(ex_8, node(1, 15), 0).  
bnn_input(ex_8, node(1, 16), 0).  
bnn_input(ex_8, node(1, 17), 1).  
bnn_input(ex_8, node(1, 18), 0).  
bnn_input(ex_8, node(1, 19), 1).  
bnn_input(ex_8, node(1, 20), 0).  
bnn_input(ex_8, node(1, 21), 1).  
bnn_input(ex_8, node(1, 22), 0).  
bnn_input(ex_8, node(1, 23), 0).  
bnn_input(ex_8, node(1, 24), 1).  
bnn_input(ex_8, node(1, 25), 1).  

bnn_input(ex_9, node(1, 1), 1).  
bnn_input(ex_9, node(1, 2), 0).  
bnn_input(ex_9, node(1, 3), 0).  
bnn_input(ex_9, node(1, 4), 0).  
bnn_input(ex_9, node(1, 5), 1).  
bnn_input(ex_9, node(1, 6), 0).  
bnn_input(ex_9, node(1, 7), 1).  
bnn_input(ex_9, node(1, 8), 0).  
bnn_input(ex_9, node(1, 9), 1).  
bnn_input(ex_9, node(1, 10), 0).  
bnn_input(ex_9, node(1, 11), 0).  
bnn_input(ex_9, node(1, 12), 0).  
bnn_input(ex_9, node(1, 13), 1).  
bnn_input(ex_9, node(1, 14), 1).  
bnn_input(ex_9, node(1, 15), 0).  
bnn_input(ex_9, node(1, 16), 0).  
bnn_input(ex_9, node(1, 17), 1).  
bnn_input(ex_9, node(1, 18), 0).  
bnn_input(ex_9, node(1, 19), 1).  
bnn_input(ex_9, node(1, 20), 0).  
bnn_input(ex_9, node(1, 21), 1).  
bnn_input(ex_9, node(1, 22), 0).  
bnn_input(ex_9, node(1, 23), 0).  
bnn_input(ex_9, node(1, 24), 0).  
bnn_input(ex_9, node(1, 25), 1).  

bnn_input(ex_10, node(1, 1), 1).  
bnn_input(ex_10, node(1, 2), 0).  
bnn_input(ex_10, node(1, 3), 0).  
bnn_input(ex_10, node(1, 4), 0).  
bnn_input(ex_10, node(1, 5), 1).  
bnn_input(ex_10, node(1, 6), 0).  
bnn_input(ex_10, node(1, 7), 1).  
bnn_input(ex_10, node(1, 8), 0).  
bnn_input(ex_10, node(1, 9), 1).  
bnn_input(ex_10, node(1, 10), 0).  
bnn_input(ex_10, node(1, 11), 0).  
bnn_input(ex_10, node(1, 12), 1).  
bnn_input(ex_10, node(1, 13), 1).  
bnn_input(ex_10, node(1, 14), 0).  
bnn_input(ex_10, node(1, 15), 0).  
bnn_input(ex_10, node(1, 16), 0).  
bnn_input(ex_10, node(1, 17), 1).  
bnn_input(ex_10, node(1, 18), 0).  
bnn_input(ex_10, node(1, 19), 1).  
bnn_input(ex_10, node(1, 20), 0).  
bnn_input(ex_10, node(1, 21), 1).  
bnn_input(ex_10, node(1, 22), 0).  
bnn_input(ex_10, node(1, 23), 0).  
bnn_input(ex_10, node(1, 24), 0).  
bnn_input(ex_10, node(1, 25), 1).  

bnn_input(ex_11, node(1, 1), 1).  
bnn_input(ex_11, node(1, 2), 0).  
bnn_input(ex_11, node(1, 3), 0).  
bnn_input(ex_11, node(1, 4), 0).  
bnn_input(ex_11, node(1, 5), 1).  
bnn_input(ex_11, node(1, 6), 0).  
bnn_input(ex_11, node(1, 7), 1).  
bnn_input(ex_11, node(1, 8), 0).  
bnn_input(ex_11, node(1, 9), 1).  
bnn_input(ex_11, node(1, 10), 0).  
bnn_input(ex_11, node(1, 11), 0).  
bnn_input(ex_11, node(1, 12), 0).  
bnn_input(ex_11, node(1, 13), 1).  
bnn_input(ex_11, node(1, 14), 0).  
bnn_input(ex_11, node(1, 15), 0).  
bnn_input(ex_11, node(1, 16), 0).  
bnn_input(ex_11, node(1, 17), 1).  
bnn_input(ex_11, node(1, 18), 0).  
bnn_input(ex_11, node(1, 19), 1).  
bnn_input(ex_11, node(1, 20), 0).  
bnn_input(ex_11, node(1, 21), 1).  
bnn_input(ex_11, node(1, 22), 0).  
bnn_input(ex_11, node(1, 23), 0).  
bnn_input(ex_11, node(1, 24), 0).  
bnn_input(ex_11, node(1, 25), 1).  

% Sprite tiles:

sprite_at(1, obj_cell_1_1, ex_2).
sprite_at(1, obj_cell_2_1, ex_8).
sprite_at(1, obj_cell_3_1, ex_1).
sprite_at(1, obj_cell_4_1, ex_1).
sprite_at(1, obj_cell_5_1, ex_5).
sprite_at(1, obj_cell_6_1, ex_3).
sprite_at(1, obj_cell_7_1, ex_3).
sprite_at(1, obj_cell_8_1, ex_1).

sprite_at(2, obj_cell_1_1, ex_1).
sprite_at(2, obj_cell_2_1, ex_0).
sprite_at(2, obj_cell_3_1, ex_8).
sprite_at(2, obj_cell_4_1, ex_2).
sprite_at(2, obj_cell_5_1, ex_6).
sprite_at(2, obj_cell_6_1, ex_1).
sprite_at(2, obj_cell_7_1, ex_2).
sprite_at(2, obj_cell_8_1, ex_2).

sprite_at(3, obj_cell_1_1, ex_2).
sprite_at(3, obj_cell_2_1, ex_2).
sprite_at(3, obj_cell_3_1, ex_9).
sprite_at(3, obj_cell_4_1, ex_0).
sprite_at(3, obj_cell_5_1, ex_4).
sprite_at(3, obj_cell_6_1, ex_3).
sprite_at(3, obj_cell_7_1, ex_0).
sprite_at(3, obj_cell_8_1, ex_0).

sprite_at(4, obj_cell_1_1, ex_1).
sprite_at(4, obj_cell_2_1, ex_2).
sprite_at(4, obj_cell_3_1, ex_3).
sprite_at(4, obj_cell_4_1, ex_9).
sprite_at(4, obj_cell_5_1, ex_7).
sprite_at(4, obj_cell_6_1, ex_3).
sprite_at(4, obj_cell_7_1, ex_1).
sprite_at(4, obj_cell_8_1, ex_2).

sprite_at(5, obj_cell_1_1, ex_2).
sprite_at(5, obj_cell_2_1, ex_1).
sprite_at(5, obj_cell_3_1, ex_3).
sprite_at(5, obj_cell_4_1, ex_0).
sprite_at(5, obj_cell_5_1, ex_9).
sprite_at(5, obj_cell_6_1, ex_5).
sprite_at(5, obj_cell_7_1, ex_1).
sprite_at(5, obj_cell_8_1, ex_1).

sprite_at(6, obj_cell_1_1, ex_2).
sprite_at(6, obj_cell_2_1, ex_3).
sprite_at(6, obj_cell_3_1, ex_0).
sprite_at(6, obj_cell_4_1, ex_3).
sprite_at(6, obj_cell_5_1, ex_10).
sprite_at(6, obj_cell_6_1, ex_5).
sprite_at(6, obj_cell_7_1, ex_3).
sprite_at(6, obj_cell_8_1, ex_3).

sprite_at(7, obj_cell_1_1, ex_2).
sprite_at(7, obj_cell_2_1, ex_1).
sprite_at(7, obj_cell_3_1, ex_2).
sprite_at(7, obj_cell_4_1, ex_2).
sprite_at(7, obj_cell_5_1, ex_0).
sprite_at(7, obj_cell_6_1, ex_11).
sprite_at(7, obj_cell_7_1, ex_4).
sprite_at(7, obj_cell_8_1, ex_2).


% Held-out possibles at time 8
% Pixels:

% Time: 8

% ......mb

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜


% Sprite tiles:

test_sprite_at(8, obj_cell_1_1, ex_3).
test_sprite_at(8, obj_cell_2_1, ex_2).
test_sprite_at(8, obj_cell_3_1, ex_3).
test_sprite_at(8, obj_cell_4_1, ex_3).
test_sprite_at(8, obj_cell_5_1, ex_3).
test_sprite_at(8, obj_cell_6_1, ex_2).
test_sprite_at(8, obj_cell_7_1, ex_11).
test_sprite_at(8, obj_cell_8_1, ex_7).
% Pixels:

% Time: 8

% ......mb

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬛⬛⬛⬛⬛
% ⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜


% Sprite tiles:

test_sprite_at(8, obj_cell_1_1, ex_2).
test_sprite_at(8, obj_cell_2_1, ex_2).
test_sprite_at(8, obj_cell_3_1, ex_0).
test_sprite_at(8, obj_cell_4_1, ex_2).
test_sprite_at(8, obj_cell_5_1, ex_3).
test_sprite_at(8, obj_cell_6_1, ex_1).
test_sprite_at(8, obj_cell_7_1, ex_10).
test_sprite_at(8, obj_cell_8_1, ex_7).
% Pixels:

% Time: 8

% ......mb

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬛⬛⬜⬛⬛
% ⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜


% Sprite tiles:

test_sprite_at(8, obj_cell_1_1, ex_3).
test_sprite_at(8, obj_cell_2_1, ex_2).
test_sprite_at(8, obj_cell_3_1, ex_1).
test_sprite_at(8, obj_cell_4_1, ex_3).
test_sprite_at(8, obj_cell_5_1, ex_3).
test_sprite_at(8, obj_cell_6_1, ex_2).
test_sprite_at(8, obj_cell_7_1, ex_10).
test_sprite_at(8, obj_cell_8_1, ex_6).

% Held-out impossibles at time 8
% Pixels:

% Time: 8

% .....mb.

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬛⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜
% ⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 1, obj_cell_1_1, ex_1).
test_impossible_combination(8, 1, obj_cell_2_1, ex_3).
test_impossible_combination(8, 1, obj_cell_3_1, ex_1).
test_impossible_combination(8, 1, obj_cell_4_1, ex_2).
test_impossible_combination(8, 1, obj_cell_5_1, ex_3).
test_impossible_combination(8, 1, obj_cell_6_1, ex_8).
test_impossible_combination(8, 1, obj_cell_7_1, ex_5).
test_impossible_combination(8, 1, obj_cell_8_1, ex_0).
% Pixels:

% Time: 8

% ....mb..

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 2, obj_cell_1_1, ex_1).
test_impossible_combination(8, 2, obj_cell_2_1, ex_2).
test_impossible_combination(8, 2, obj_cell_3_1, ex_3).
test_impossible_combination(8, 2, obj_cell_4_1, ex_2).
test_impossible_combination(8, 2, obj_cell_5_1, ex_8).
test_impossible_combination(8, 2, obj_cell_6_1, ex_6).
test_impossible_combination(8, 2, obj_cell_7_1, ex_3).
test_impossible_combination(8, 2, obj_cell_8_1, ex_0).
% Pixels:

% Time: 8

% ....mb..

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 3, obj_cell_1_1, ex_0).
test_impossible_combination(8, 3, obj_cell_2_1, ex_1).
test_impossible_combination(8, 3, obj_cell_3_1, ex_3).
test_impossible_combination(8, 3, obj_cell_4_1, ex_0).
test_impossible_combination(8, 3, obj_cell_5_1, ex_11).
test_impossible_combination(8, 3, obj_cell_6_1, ex_7).
test_impossible_combination(8, 3, obj_cell_7_1, ex_0).
test_impossible_combination(8, 3, obj_cell_8_1, ex_0).
% Pixels:

% Time: 8

% ...mb...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬛⬜⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬛⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 4, obj_cell_1_1, ex_3).
test_impossible_combination(8, 4, obj_cell_2_1, ex_2).
test_impossible_combination(8, 4, obj_cell_3_1, ex_1).
test_impossible_combination(8, 4, obj_cell_4_1, ex_8).
test_impossible_combination(8, 4, obj_cell_5_1, ex_6).
test_impossible_combination(8, 4, obj_cell_6_1, ex_1).
test_impossible_combination(8, 4, obj_cell_7_1, ex_2).
test_impossible_combination(8, 4, obj_cell_8_1, ex_0).
% Pixels:

% Time: 8

% ..m.b...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 5, obj_cell_1_1, ex_3).
test_impossible_combination(8, 5, obj_cell_2_1, ex_1).
test_impossible_combination(8, 5, obj_cell_3_1, ex_11).
test_impossible_combination(8, 5, obj_cell_4_1, ex_3).
test_impossible_combination(8, 5, obj_cell_5_1, ex_4).
test_impossible_combination(8, 5, obj_cell_6_1, ex_2).
test_impossible_combination(8, 5, obj_cell_7_1, ex_3).
test_impossible_combination(8, 5, obj_cell_8_1, ex_2).
% Pixels:

% Time: 8

% ..m.b...

% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛⬛⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬛⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛
% ⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 6, obj_cell_1_1, ex_2).
test_impossible_combination(8, 6, obj_cell_2_1, ex_3).
test_impossible_combination(8, 6, obj_cell_3_1, ex_11).
test_impossible_combination(8, 6, obj_cell_4_1, ex_2).
test_impossible_combination(8, 6, obj_cell_5_1, ex_6).
test_impossible_combination(8, 6, obj_cell_6_1, ex_0).
test_impossible_combination(8, 6, obj_cell_7_1, ex_2).
test_impossible_combination(8, 6, obj_cell_8_1, ex_0).
% Pixels:

% Time: 8

% .m..b...

% ⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬛⬜⬛⬜⬛⬜⬛⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬛⬛⬛⬛⬜⬛⬜⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜
% ⬜⬜⬜⬜⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜


% Sprite tiles:

test_impossible_combination(8, 7, obj_cell_1_1, ex_0).
test_impossible_combination(8, 7, obj_cell_2_1, ex_10).
test_impossible_combination(8, 7, obj_cell_3_1, ex_1).
test_impossible_combination(8, 7, obj_cell_4_1, ex_2).
test_impossible_combination(8, 7, obj_cell_5_1, ex_5).
test_impossible_combination(8, 7, obj_cell_6_1, ex_2).
test_impossible_combination(8, 7, obj_cell_7_1, ex_2).
test_impossible_combination(8, 7, obj_cell_8_1, ex_3).
% Exogenous actions
exogenous(s(c_east, obj_x1), 1).
exogenous(s(c_noop, obj_x1), 2).
exogenous(s(c_east, obj_x1), 3).
exogenous(s(c_east, obj_x1), 4).
exogenous(s(c_noop, obj_x1), 5).
exogenous(s(c_east, obj_x1), 6).
exogenous(s(c_east, obj_x1), 7).
exogenous(s(c_noop, obj_x1), 8).

% Elements
is_object(obj_x1).
is_object(obj_x2).
is_object(obj_cell_1_1).
is_object(obj_cell_2_1).
is_object(obj_cell_3_1).
is_object(obj_cell_4_1).
is_object(obj_cell_5_1).
is_object(obj_cell_6_1).
is_object(obj_cell_7_1).
is_object(obj_cell_8_1).
is_cell(obj_cell_1_1).
is_cell(obj_cell_2_1).
is_cell(obj_cell_3_1).
is_cell(obj_cell_4_1).
is_cell(obj_cell_5_1).
is_cell(obj_cell_6_1).
is_cell(obj_cell_7_1).
is_cell(obj_cell_8_1).

% Concepts
is_concept(in_1).
is_concept(in_2).
is_concept(noop).
is_concept(north).
is_concept(south).
is_concept(east).
is_concept(west).

% Time
is_time(1..8).

% ∃! clause for c_in_1 : at most one
:-
	holds(s2(c_in_1, X, Y), T),
	holds(s2(c_in_1, X, Y2), T),
	Y != Y2.

% ∃! clause for c_in_1 : at least one
:-
	permanent(isa(t_1, X)),
	is_time(T),
	not aux_c_in_1(X, T).

aux_c_in_1(X, T) :-
	holds(s2(c_in_1, X, _), T).

% Incompossibility for c_in_1
incompossible(s2(c_in_1, X, Y), s2(c_in_1, X, Y2)) :-
	permanent(isa(t_1, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% ∃! clause for c_in_2 : at most one
:-
	holds(s2(c_in_2, X, Y), T),
	holds(s2(c_in_2, X, Y2), T),
	Y != Y2.

% ∃! clause for c_in_2 : at least one
:-
	permanent(isa(t_2, X)),
	is_time(T),
	not aux_c_in_2(X, T).

aux_c_in_2(X, T) :-
	holds(s2(c_in_2, X, _), T).

% Incompossibility for c_in_2
incompossible(s2(c_in_2, X, Y), s2(c_in_2, X, Y2)) :-
	permanent(isa(t_2, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% Exclusions
% Every action is either noop, north, south, east, or west
% ∀X : man, noop(X) ⊕ north(X) ⊕ south(X) ⊕ east(X) ⊕ west(X)

% At most one
:-
	holds(s(c_noop, X), T),
	holds(s(c_north, X), T).
:-
	holds(s(c_noop, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_noop, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_north, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_north, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_south, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_noop, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_north, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_west, X), T).

% At least one
:-
	permanent(isa(t_1, X)),
	is_time(T),
	not holds(s(c_noop, X), T),
	not holds(s(c_north, X), T),
	not holds(s(c_south, X), T),
	not holds(s(c_east, X), T),
	not holds(s(c_west, X), T).

% Incompossibility
incompossible(s(c_noop, X), s(c_north, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_noop, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_noop, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_north, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_north, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_south, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_noop, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_north, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).


% Cell adjacency
permanent(isa2(p_right, obj_cell_1_1, obj_cell_2_1)).
permanent(isa2(p_right, obj_cell_2_1, obj_cell_3_1)).
permanent(isa2(p_right, obj_cell_3_1, obj_cell_4_1)).
permanent(isa2(p_right, obj_cell_4_1, obj_cell_5_1)).
permanent(isa2(p_right, obj_cell_5_1, obj_cell_6_1)).
permanent(isa2(p_right, obj_cell_6_1, obj_cell_7_1)).
permanent(isa2(p_right, obj_cell_7_1, obj_cell_8_1)).

% Walls
permanent(isa(p_is_not_wall, obj_cell_1_1)).
permanent(isa(p_is_not_wall, obj_cell_2_1)).
permanent(isa(p_is_not_wall, obj_cell_3_1)).
permanent(isa(p_is_not_wall, obj_cell_4_1)).
permanent(isa(p_is_not_wall, obj_cell_5_1)).
permanent(isa(p_is_not_wall, obj_cell_6_1)).
permanent(isa(p_is_not_wall, obj_cell_7_1)).
permanent(isa(p_is_not_wall, obj_cell_8_1)).
