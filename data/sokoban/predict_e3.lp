%--------------------------------------------------
% Generated by Sokoban.hs
%--------------------------------------------------
% 
% Time 1:
% 
% .
% b
% m
% .
% b
% .
% 
% north
% 
% Time 2:
% 
% b
% m
% .
% .
% b
% .
% 
% south
% 
% Time 3:
% 
% b
% .
% m
% .
% b
% .
% 
% south
% 
% Time 4:
% 
% b
% .
% .
% m
% b
% .
% 
% south
% 
% Time 5:
% 
% b
% .
% .
% .
% m
% b
% 
% noop
% 
%--------------------------------------------------

% The given sequence
senses(s2(c_in_1, obj_x1, obj_cell_1_3), 1).
senses(s2(c_in_2, obj_x2, obj_cell_1_2), 1).
senses(s2(c_in_2, obj_x3, obj_cell_1_5), 1).
senses(s2(c_in_1, obj_x1, obj_cell_1_2), 2).
senses(s2(c_in_2, obj_x2, obj_cell_1_1), 2).
senses(s2(c_in_2, obj_x3, obj_cell_1_5), 2).
senses(s2(c_in_1, obj_x1, obj_cell_1_3), 3).
senses(s2(c_in_2, obj_x2, obj_cell_1_1), 3).
senses(s2(c_in_2, obj_x3, obj_cell_1_5), 3).
senses(s2(c_in_1, obj_x1, obj_cell_1_4), 4).
senses(s2(c_in_2, obj_x2, obj_cell_1_1), 4).
senses(s2(c_in_2, obj_x3, obj_cell_1_5), 4).
senses(s2(c_in_1, obj_x1, obj_cell_1_5), 5).
senses(s2(c_in_2, obj_x2, obj_cell_1_1), 5).
senses(s2(c_in_2, obj_x3, obj_cell_1_6), 5).

% Exogenous actions
exogenous(s(c_north, obj_x1), 1).
exogenous(s(c_south, obj_x1), 2).
exogenous(s(c_south, obj_x1), 3).
exogenous(s(c_south, obj_x1), 4).
exogenous(s(c_noop, obj_x1), 5).

% Elements
is_object(obj_x1).
is_object(obj_x2).
is_object(obj_x3).
is_object(obj_cell_1_1).
is_object(obj_cell_1_2).
is_object(obj_cell_1_3).
is_object(obj_cell_1_4).
is_object(obj_cell_1_5).
is_object(obj_cell_1_6).
is_cell(obj_cell_1_1).
is_cell(obj_cell_1_2).
is_cell(obj_cell_1_3).
is_cell(obj_cell_1_4).
is_cell(obj_cell_1_5).
is_cell(obj_cell_1_6).

% Concepts
is_concept(in_1).
is_concept(in_2).
is_concept(noop).
is_concept(north).
is_concept(south).
is_concept(east).
is_concept(west).

% Time
is_time(1..5).

% ∃! clause for c_in_1 : at most one
:-
	holds(s2(c_in_1, X, Y), T),
	holds(s2(c_in_1, X, Y2), T),
	Y != Y2.

% ∃! clause for c_in_1 : at least one
:-
	permanent(isa(t_1, X)),
	is_time(T),
	not aux_c_in_1(X, T).

aux_c_in_1(X, T) :-
	holds(s2(c_in_1, X, _), T).

% Incompossibility for c_in_1
incompossible(s2(c_in_1, X, Y), s2(c_in_1, X, Y2)) :-
	permanent(isa(t_1, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% ∃! clause for c_in_2 : at most one
:-
	holds(s2(c_in_2, X, Y), T),
	holds(s2(c_in_2, X, Y2), T),
	Y != Y2.

% ∃! clause for c_in_2 : at least one
:-
	permanent(isa(t_2, X)),
	is_time(T),
	not aux_c_in_2(X, T).

aux_c_in_2(X, T) :-
	holds(s2(c_in_2, X, _), T).

% Incompossibility for c_in_2
incompossible(s2(c_in_2, X, Y), s2(c_in_2, X, Y2)) :-
	permanent(isa(t_2, X)),
	permanent(isa(t_cell, Y)),
	permanent(isa(t_cell, Y2)),
	Y != Y2.

% Exclusions
% Every action is either noop, north, south, east, or west
% ∀X : man, noop(X) ⊕ north(X) ⊕ south(X) ⊕ east(X) ⊕ west(X)

% At most one
:-
	holds(s(c_noop, X), T),
	holds(s(c_north, X), T).
:-
	holds(s(c_noop, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_noop, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_north, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_north, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_south, X), T),
	holds(s(c_west, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_noop, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_north, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_south, X), T).
:-
	holds(s(c_east, X), T),
	holds(s(c_west, X), T).

% At least one
:-
	permanent(isa(t_1, X)),
	is_time(T),
	not holds(s(c_noop, X), T),
	not holds(s(c_north, X), T),
	not holds(s(c_south, X), T),
	not holds(s(c_east, X), T),
	not holds(s(c_west, X), T).

% Incompossibility
incompossible(s(c_noop, X), s(c_north, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_noop, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_noop, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_north, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_north, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_south, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_noop, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_north, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_south, X)) :-
	permanent(isa(t_1, X)).

incompossible(s(c_east, X), s(c_west, X)) :-
	permanent(isa(t_1, X)).


% Cell adjacency
permanent(isa2(p_below, obj_cell_1_1, obj_cell_1_2)).
permanent(isa2(p_below, obj_cell_1_2, obj_cell_1_3)).
permanent(isa2(p_below, obj_cell_1_3, obj_cell_1_4)).
permanent(isa2(p_below, obj_cell_1_4, obj_cell_1_5)).
permanent(isa2(p_below, obj_cell_1_5, obj_cell_1_6)).

% Walls
permanent(isa(p_is_not_wall, obj_cell_1_1)).
permanent(isa(p_is_not_wall, obj_cell_1_2)).
permanent(isa(p_is_not_wall, obj_cell_1_3)).
permanent(isa(p_is_not_wall, obj_cell_1_4)).
permanent(isa(p_is_not_wall, obj_cell_1_5)).
permanent(isa(p_is_not_wall, obj_cell_1_6)).
