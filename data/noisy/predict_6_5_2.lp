%--------------------------------------------------
%
% Generated by NoisySequences.hs
%
% Original sequence: 001100110011001100110011001100110011
%
% True bit vector size: 4
%
% Num ambiguities: 1
%
% Bit vector: 001100011010110001110011100111010000001011111100010101001001...
%
% Guessed bit vector size: 5
%
% Guessed num predicates: 2
%
% (Guesses are wrong)
%
% Sequence:
% Time 1: 00110
% Time 2: 00110
% Time 3: 10110
% Time 4: 00111
% Time 5: 00111
% Time 6: 00111
% Time 7: 01000
% Time 8: 00010
% Time 9: 11111
% Time 10: 10001
% Time 11: 01010
% Time 12: 01001
% Time 13: 11000
% Time 14: 11000
% Time 15: 10111
% Time 16: 01110
% Time 17: 00110
% Time 18: 00111
% Time 19: 10110
% Time 20: 00010
% Time 21: 00011
% Time 22: 01010
% Time 23: 00010
% Time 24: 10101
% Time 25: 11001
% Time 26: 11101
% Time 27: 10010
% Time 28: 00111
%--------------------------------------------------

% Inputs to binary neural network
bnn_input(ex_0, node(1, 1), 0).
bnn_input(ex_0, node(1, 2), 0).
bnn_input(ex_0, node(1, 3), 0).
bnn_input(ex_0, node(1, 4), 1).
bnn_input(ex_0, node(1, 5), 0).
bnn_input(ex_1, node(1, 1), 0).
bnn_input(ex_1, node(1, 2), 0).
bnn_input(ex_1, node(1, 3), 0).
bnn_input(ex_1, node(1, 4), 1).
bnn_input(ex_1, node(1, 5), 1).
bnn_input(ex_2, node(1, 1), 0).
bnn_input(ex_2, node(1, 2), 0).
bnn_input(ex_2, node(1, 3), 1).
bnn_input(ex_2, node(1, 4), 1).
bnn_input(ex_2, node(1, 5), 0).
bnn_input(ex_3, node(1, 1), 0).
bnn_input(ex_3, node(1, 2), 0).
bnn_input(ex_3, node(1, 3), 1).
bnn_input(ex_3, node(1, 4), 1).
bnn_input(ex_3, node(1, 5), 1).
bnn_input(ex_4, node(1, 1), 0).
bnn_input(ex_4, node(1, 2), 1).
bnn_input(ex_4, node(1, 3), 0).
bnn_input(ex_4, node(1, 4), 0).
bnn_input(ex_4, node(1, 5), 0).
bnn_input(ex_5, node(1, 1), 0).
bnn_input(ex_5, node(1, 2), 1).
bnn_input(ex_5, node(1, 3), 0).
bnn_input(ex_5, node(1, 4), 0).
bnn_input(ex_5, node(1, 5), 1).
bnn_input(ex_6, node(1, 1), 0).
bnn_input(ex_6, node(1, 2), 1).
bnn_input(ex_6, node(1, 3), 0).
bnn_input(ex_6, node(1, 4), 1).
bnn_input(ex_6, node(1, 5), 0).
bnn_input(ex_7, node(1, 1), 0).
bnn_input(ex_7, node(1, 2), 1).
bnn_input(ex_7, node(1, 3), 1).
bnn_input(ex_7, node(1, 4), 1).
bnn_input(ex_7, node(1, 5), 0).
bnn_input(ex_8, node(1, 1), 1).
bnn_input(ex_8, node(1, 2), 0).
bnn_input(ex_8, node(1, 3), 0).
bnn_input(ex_8, node(1, 4), 0).
bnn_input(ex_8, node(1, 5), 1).
bnn_input(ex_9, node(1, 1), 1).
bnn_input(ex_9, node(1, 2), 0).
bnn_input(ex_9, node(1, 3), 0).
bnn_input(ex_9, node(1, 4), 1).
bnn_input(ex_9, node(1, 5), 0).
bnn_input(ex_10, node(1, 1), 1).
bnn_input(ex_10, node(1, 2), 0).
bnn_input(ex_10, node(1, 3), 1).
bnn_input(ex_10, node(1, 4), 0).
bnn_input(ex_10, node(1, 5), 1).
bnn_input(ex_11, node(1, 1), 1).
bnn_input(ex_11, node(1, 2), 0).
bnn_input(ex_11, node(1, 3), 1).
bnn_input(ex_11, node(1, 4), 1).
bnn_input(ex_11, node(1, 5), 0).
bnn_input(ex_12, node(1, 1), 1).
bnn_input(ex_12, node(1, 2), 0).
bnn_input(ex_12, node(1, 3), 1).
bnn_input(ex_12, node(1, 4), 1).
bnn_input(ex_12, node(1, 5), 1).
bnn_input(ex_13, node(1, 1), 1).
bnn_input(ex_13, node(1, 2), 1).
bnn_input(ex_13, node(1, 3), 0).
bnn_input(ex_13, node(1, 4), 0).
bnn_input(ex_13, node(1, 5), 0).
bnn_input(ex_14, node(1, 1), 1).
bnn_input(ex_14, node(1, 2), 1).
bnn_input(ex_14, node(1, 3), 0).
bnn_input(ex_14, node(1, 4), 0).
bnn_input(ex_14, node(1, 5), 1).
bnn_input(ex_15, node(1, 1), 1).
bnn_input(ex_15, node(1, 2), 1).
bnn_input(ex_15, node(1, 3), 1).
bnn_input(ex_15, node(1, 4), 0).
bnn_input(ex_15, node(1, 5), 1).
bnn_input(ex_16, node(1, 1), 1).
bnn_input(ex_16, node(1, 2), 1).
bnn_input(ex_16, node(1, 3), 1).
bnn_input(ex_16, node(1, 4), 1).
bnn_input(ex_16, node(1, 5), 1).

% Sequence
bv_at(1, ex_2).
bv_at(2, ex_2).
bv_at(3, ex_11).
bv_at(4, ex_3).
bv_at(5, ex_3).
bv_at(6, ex_3).
bv_at(7, ex_4).
bv_at(8, ex_0).
bv_at(9, ex_16).
bv_at(10, ex_8).
bv_at(11, ex_6).
bv_at(12, ex_5).
bv_at(13, ex_13).
bv_at(14, ex_13).
bv_at(15, ex_12).
bv_at(16, ex_7).
bv_at(17, ex_2).
bv_at(18, ex_3).
bv_at(19, ex_11).
bv_at(20, ex_0).
bv_at(21, ex_1).
bv_at(22, ex_6).
bv_at(23, ex_0).
bv_at(24, ex_10).
bv_at(25, ex_14).
bv_at(26, ex_15).

incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_0, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_1, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_2, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_3, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_4, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_5, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_6, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_7, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_8, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_4, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_5, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_6, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_7, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_13, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_14, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_15, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_9, P1),
	possible_pred(ex_16, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_10, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_10, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_10, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_11, P1),
	possible_pred(ex_11, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_0, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_1, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_2, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_8, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_9, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_10, P2).
incorrect :-
	holds(s(P1, obj_sensor), 27),
	holds(s(P2, obj_sensor), 28),
	possible_pred(ex_12, P1),
	possible_pred(ex_11, P2).
% unacceptable: (27): [False,False,False,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,True,False,False,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,True,False,False,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,True,False,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [False,True,True,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,True,False,False,False] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,True,False,False,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,True,True,False,True] 
% unacceptable: (27): [False,False,False,True,False] (28): [True,True,True,True,True] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,True,False,False,False] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,True,False,False,True] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,True,False,True,False] 
% unacceptable: (27): [False,False,False,True,True] (28): [False,True,True,True,False] 
% unacceptable: (27): [False,False,True,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,False,True,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,False,True,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,False,True,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,False,True,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,False,True,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,False,True,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,False,True,True,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,False,True,True,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,False,True,True,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,False,True,True,True] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,False,True,True,True] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,False,True,True,True] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,False,True,True,True] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,True,False,False,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,True,False,False,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,True,False,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [False,True,True,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,True,False,False,False] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,True,False,False,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,True,True,False,True] 
% unacceptable: (27): [False,True,False,False,False] (28): [True,True,True,True,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,True,False,False,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,True,False,False,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,True,False,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [False,True,True,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,True,False,False,False] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,True,False,False,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,True,True,False,True] 
% unacceptable: (27): [False,True,False,False,True] (28): [True,True,True,True,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,True,False,False,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,True,False,False,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,True,False,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [False,True,True,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,True,False,False,False] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,True,False,False,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,True,True,False,True] 
% unacceptable: (27): [False,True,False,True,False] (28): [True,True,True,True,True] 
% unacceptable: (27): [False,True,True,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [False,True,True,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [False,True,True,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [False,True,True,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [False,True,True,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [False,True,True,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [False,True,True,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,True,False,False,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,True,False,False,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,True,False,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [False,True,True,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,False,False,False,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,False,False,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,False,True,False,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,False,True,True,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,True,False,False,False] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,True,False,False,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,True,True,False,True] 
% unacceptable: (27): [True,False,False,False,True] (28): [True,True,True,True,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,True,False,False,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,True,False,False,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,True,False,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [False,True,True,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,True,False,False,False] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,True,False,False,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,True,True,False,True] 
% unacceptable: (27): [True,False,False,True,False] (28): [True,True,True,True,True] 
% unacceptable: (27): [True,False,True,False,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [True,False,True,False,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [True,False,True,False,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [True,False,True,True,False] (28): [False,False,False,True,False] 
% unacceptable: (27): [True,False,True,True,False] (28): [False,False,False,True,True] 
% unacceptable: (27): [True,False,True,True,False] (28): [False,False,True,True,False] 
% unacceptable: (27): [True,False,True,True,False] (28): [True,False,False,False,True] 
% unacceptable: (27): [True,False,True,True,False] (28): [True,False,False,True,False] 
% unacceptable: (27): [True,False,True,True,False] (28): [True,False,True,False,True] 
% unacceptable: (27): [True,False,True,True,False] (28): [True,False,True,True,False] 
% unacceptable: (27): [True,False,True,True,True] (28): [False,False,False,True,False] 
% unacceptable: (27): [True,False,True,True,True] (28): [False,False,False,True,True] 
% unacceptable: (27): [True,False,True,True,True] (28): [False,False,True,True,False] 
% unacceptable: (27): [True,False,True,True,True] (28): [True,False,False,False,True] 
% unacceptable: (27): [True,False,True,True,True] (28): [True,False,False,True,False] 
% unacceptable: (27): [True,False,True,True,True] (28): [True,False,True,False,True] 
% unacceptable: (27): [True,False,True,True,True] (28): [True,False,True,True,False] 

% Elements
is_object(obj_sensor).
is_time(1..28).

% Concepts
is_concept(c_1).
is_concept(c_2).

% At most one
:- holds(s(c_1, X), T), holds(s(c_2, X), T).

% At least one
:-
	permanent(isa(t_sensor, X)),
	is_time(T),
	not holds(s(c_1, X), T),
	not holds(s(c_2, X), T).

% Incompossibility
incompossible(s(c_1, X), s(c_2, X)) :- permanent(isa(t_sensor, X)).

% Binary neural network
nodes(1, 5).
nodes(2, 2).
nodes(3, 2).

% Possible predicate assignments from bnn
possible_pred(BV, c_1) :- bnn_result(BV, 1, 1).
possible_pred(BV, c_2) :- bnn_result(BV, 2, 1).

% Senses choice from bnn assignments
1 { senses(s(C, obj_sensor), T) : possible_pred(BV, C) } 1 :- bv_at(T, BV).


is_possible_pred(C) :- possible_pred(_, C).

count_bnn_examples_per_predicate(C, N) :-
	is_possible_pred(C),
	N = #count { E : possible_pred(E, C) }.

num_bvs(N) :- N = #count { BV : bv_at(T, BV), is_time(T) }.

max_bnn_examples_per_predicate(M) :-
	M = #max { N : count_bnn_examples_per_predicate(C, N) }.

:~ max_bnn_examples_per_predicate(M). [ M @ 2, M]
